.TH "Apache 2.X Filter Module" 3 "30 Aug 2004" "Version 2.04-dev" "libapreq2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Apache 2.X Filter Module \- mod_apreq - DSO that ties libapreq2 to \fBApache\fP 2.X.  

.PP
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBAPREQ_MODULE_NAME\fP   'APACHE2'"
.br
.ti -1c
.RI "#define \fBAPREQ_MODULE_MAGIC_NUMBER\fP   20040809"
.br
.in -1c
.SH "Detailed Description"
.PP 
mod_apreq - DSO that ties libapreq2 to \fBApache\fP 2.X. 
.PP
mod_apreq provides the 'APREQ' input filter for using libapreq2 (and allow its parsed data structures to be shared) within the \fBApache\fP 2.X webserver. Using it, libapreq2 works properly in every phase of the HTTP request, from translation handlers to output filters, and even for subrequests / internal redirects.
.PP
.PP
.PP
.SS "Activating mod_apreq in \fBApache\fP 2.X"
.PP
Normally the installation process triggered by \fC make install\fP will make the necessary changes to httpd.conf for you. In any case, after installing the mod_apreq.so module, be sure your webserver's httpd.conf activates it on startup with a LoadModule directive, e.g. 
.PP
.nf
     LoadModule    modules/mod_apreq.so

.fi
.PP
.PP
The mod_apreq filter is named 'APREQ', and may be used in Apache's input filter directives, e.g. 
.PP
.nf
     AddInputFilter APREQ         # or
     SetInputFilter APREQ

.fi
.PP
.PP
However, this is not required because libapreq2 will add the filter (only) if it's necessary. You just need to ensure that your module instantiates an \fBapreq_request_t\fP using \fBapreq_request()\fP \fIbefore the content handler ultimately reads from the input filter chain\fP. It is important to recognize that no matter how the input filters are initially arranged, the APREQ filter will attempt to reposition itself to be the last input filter to read the data.
.PP
If you want to use other input filters to transform the incoming HTTP request data, is important to register those filters with \fBApache\fP as having type AP_FTYPE_CONTENT_SET or AP_FTYPE_RESOURCE. Due to the limitations of Apache's current input filter design, types higher than AP_FTYPE_CONTENT_SET may not work properly whenever the apreq filter is active.
.PP
This is especially true when a content handler uses libapreq2 to parse some of the post data before doing an internal redirect. Any input filter subsequently added to the redirected request will bypass the original apreq filter (and therefore lose access to some of the original post data), unless its type is less than the type of the apreq filter (currently AP_FTYPE_PROTOCOL-1).
.PP
.SS "Server Configuration Directives"
.PP
DirectiveContextDefaultDescription APREQ_MaxBodydirectory-1 (Unlimited)Maximum number of bytes mod_apreq will send off to libapreq for parsing. mod_apreq will log this event and remove itself from the filter chain. The APR_EGENERAL error will be reported to libapreq2 users via the return value of \fBapreq_env_read()\fP.  APREQ_MaxBrigadedirectory\fBAPREQ_MAX_BRIGADE_LEN\fP Maximum number of bytes apreq will allow to accumulate within a brigade. Excess data will be spooled to a file bucket appended to the brigade.  APREQ_TempDirdirectoryNULLSets the location of the temporary directory apreq will use to spool overflow brigade data (based on the APREQ_MaxBrigade setting). If left unset, libapreq2 will select a platform-specific location via \fBapr_temp_dir_get()\fP.  Per-directory commands for mod_apreq
.PP
.SS "Implementation Details"
.PP
.PP
.nf

 XXX apreq as a normal input filter
 XXX apreq as a 'virtual' content handler.
 XXX apreq as a transparent 'tee'.
 
.fi
.PP
 

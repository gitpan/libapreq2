.TH "include/apreq.h" 3 "4 May 2005" "Version 2.05-dev" "libapreq2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/apreq.h \- Main header file... 
.SH SYNOPSIS
.br
.PP
\fC#include 'apr_tables.h'\fP
.br
\fC#include <stddef.h>\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBAPREQ_DECLARE\fP(d)   \fBAPR_DECLARE\fP(d)"
.br
.ti -1c
.RI "#define \fBAPREQ_DECLARE_NONSTD\fP(d)   \fBAPR_DECLARE_NONSTD\fP(d)"
.br
.ti -1c
.RI "#define \fBAPREQ_DECLARE_DATA\fP"
.br
.ti -1c
.RI "#define \fBAPREQ_DEFAULT_READ_BLOCK_SIZE\fP   (64  * 1024)"
.br
.ti -1c
.RI "#define \fBAPREQ_DEFAULT_READ_LIMIT\fP   (64 * 1024 * 1024)"
.br
.ti -1c
.RI "#define \fBAPREQ_DEFAULT_BRIGADE_LIMIT\fP   (256 * 1024)"
.br
.ti -1c
.RI "#define \fBAPREQ_DEFAULT_NELTS\fP   8"
.br
.ti -1c
.RI "#define \fBAPREQ_FLAGS_OFF\fP(f, name)   ((f) &= ~(name##_MASK << name##_BIT))"
.br
.ti -1c
.RI "#define \fBAPREQ_FLAGS_ON\fP(f, name)   ((f) |=  (name##_MASK << name##_BIT))"
.br
.ti -1c
.RI "#define \fBAPREQ_FLAGS_GET\fP(f, name)   (((f) >> name##_BIT) & name##_MASK)"
.br
.ti -1c
.RI "#define \fBAPREQ_FLAGS_SET\fP(f, name, value)"
.br
.ti -1c
.RI "#define \fBAPREQ_CHARSET_BIT\fP   0"
.br
.ti -1c
.RI "#define \fBAPREQ_CHARSET_MASK\fP   255"
.br
.ti -1c
.RI "#define \fBAPREQ_TAINTED_BIT\fP   8"
.br
.ti -1c
.RI "#define \fBAPREQ_TAINTED_MASK\fP   1"
.br
.ti -1c
.RI "#define \fBAPREQ_COOKIE_VERSION_BIT\fP   11"
.br
.ti -1c
.RI "#define \fBAPREQ_COOKIE_VERSION_MASK\fP   3"
.br
.ti -1c
.RI "#define \fBAPREQ_COOKIE_SECURE_BIT\fP   13"
.br
.ti -1c
.RI "#define \fBAPREQ_COOKIE_SECURE_MASK\fP   1"
.br
.ti -1c
.RI "#define \fBapreq_attr_to_type\fP(T, A, P)   ( (T*) ((char*)(P)-offsetof(T,A)) )"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBapreq_value_t\fP \fBapreq_value_t\fP"
.br
.RI "\fIlibapreq's pre-extensible string type \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBapreq_charset_t\fP { \fBAPREQ_CHARSET_ASCII\fP = 0, \fBAPREQ_CHARSET_LATIN1\fP = 1, \fBAPREQ_CHARSET_CP1252\fP = 2, \fBAPREQ_CHARSET_UTF8\fP = 8 }"
.br
.ti -1c
.RI "enum \fBapreq_join_t\fP { \fBAPREQ_JOIN_AS_IS\fP, \fBAPREQ_JOIN_ENCODE\fP, \fBAPREQ_JOIN_DECODE\fP, \fBAPREQ_JOIN_QUOTE\fP }"
.br
.ti -1c
.RI "enum \fBapreq_match_t\fP { \fBAPREQ_MATCH_FULL\fP, \fBAPREQ_MATCH_PARTIAL\fP }"
.br
.ti -1c
.RI "enum \fBapreq_expires_t\fP { \fBAPREQ_EXPIRES_HTTP\fP, \fBAPREQ_EXPIRES_NSCOOKIE\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static \fBAPR_INLINE\fP void \fBapreq_value_table_add\fP (const \fBapreq_value_t\fP *v, \fBapr_table_t\fP *t)"
.br
.ti -1c
.RI "\fBapr_status_t\fP \fBapreq_initialize\fP (\fBapr_pool_t\fP *pool)"
.br
.ti -1c
.RI "\fBapr_status_t\fP \fBapreq_pre_initialize\fP (\fBapr_pool_t\fP *pool)"
.br
.ti -1c
.RI "\fBapr_status_t\fP \fBapreq_post_initialize\fP (\fBapr_pool_t\fP *pool)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Main header file... 

Define the generic APREQ_ macros and common data structures. 
.SH "Define Documentation"
.PP 
.SS "#define APREQ_FLAGS_SET(f, name, value)"
.PP
\fBValue:\fP
.PP
.nf
((f) = (((f) & ~(name##_MASK << name##_BIT))        \
            | ((name##_MASK & (value)) << name##_BIT)))
.fi
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBapreq_charset_t\fP"
.PP
Character encodings. 
.SS "enum \fBapreq_expires_t\fP"
.PP
Expiration date format 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIAPREQ_EXPIRES_HTTP \fP\fP
Use date formatting consistent with RFC 2616 
.TP
\fB\fIAPREQ_EXPIRES_NSCOOKIE \fP\fP
Use format consistent with Netscape's Cookie Spec 
.SS "enum \fBapreq_join_t\fP"
.PP
Join type 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIAPREQ_JOIN_AS_IS \fP\fP
Join the strings without modification 
.TP
\fB\fIAPREQ_JOIN_ENCODE \fP\fP
Url-encode the strings before joining them 
.TP
\fB\fIAPREQ_JOIN_DECODE \fP\fP
Url-decode the strings before joining them 
.TP
\fB\fIAPREQ_JOIN_QUOTE \fP\fP
Quote the strings, backslashing existing quote marks. 
.SS "enum \fBapreq_match_t\fP"
.PP
Match type 
.PP
\fBEnumeration values: \fP
.in +1c
.TP
\fB\fIAPREQ_MATCH_FULL \fP\fP
Full match only. 
.TP
\fB\fIAPREQ_MATCH_PARTIAL \fP\fP
Partial matches are ok. 
.SH "Function Documentation"
.PP 
.SS "\fBapr_status_t\fP apreq_initialize (\fBapr_pool_t\fP * pool)"
.PP
Initialize libapreq2. Applications (except apache modules using mod_apreq) should call this exactly once before they use any libapreq2 modules. If you want to modify the list of default parsers with \fBapreq_register_parser()\fP, please use \fBapreq_pre_initialize()\fP and \fBapreq_post_initialize()\fP instead.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP a base pool persisting while libapreq2 is used 
.RE
.PP
\fBRemarks:\fP
.RS 4
after you detroy the pool, you have to call this function again with a new pool if you still plan to use libapreq2 
.RE
.PP

.SS "\fBapr_status_t\fP apreq_post_initialize (\fBapr_pool_t\fP * pool)"
.PP
Post-initialize libapreq2. Applications (except apache modules using mod_apreq2) should this exactly once before they use any libapreq2 modules for parsing.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP the same pool that was used in \fBapreq_pre_initialize()\fP. 
.RE
.PP

.SS "\fBapr_status_t\fP apreq_pre_initialize (\fBapr_pool_t\fP * pool)"
.PP
Pre-initialize libapreq2. Applications (except apache modules using mod_apreq2) should call this exactly once before they register custom parsers with libapreq2. mod_apreq2 does this automatically during the post-config phase, so modules that need call apreq_register_parser should create a post-config hook using APR_HOOK_MIDDLE.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP a base pool persisting while libapreq2 is used 
.RE
.PP
\fBRemarks:\fP
.RS 4
after you detroyed the pool, you have to call this function again with a new pool if you still plan to use libapreq2 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for libapreq2 from the source code.

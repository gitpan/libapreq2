package APR::Request::ConstantsTable;

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# ! WARNING: generated by My::ParseSource/
# !          Wed Apr 27 10:57:18 2005
# !          do NOT edit, any changes will be lost !
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

$APR::Request::ConstantsTable = [
  {
    'name' => 'APREQ_APACHE2_H'
  },
  {
    'name' => 'APREQ_CHARSET_BIT'
  },
  {
    'name' => 'APREQ_CHARSET_MASK'
  },
  {
    'name' => 'APREQ_COOKIE_H'
  },
  {
    'name' => 'APREQ_COOKIE_MAX_LENGTH'
  },
  {
    'name' => 'APREQ_COOKIE_SECURE_BIT'
  },
  {
    'name' => 'APREQ_COOKIE_SECURE_MASK'
  },
  {
    'name' => 'APREQ_COOKIE_VERSION_BIT'
  },
  {
    'name' => 'APREQ_COOKIE_VERSION_MASK'
  },
  {
    'name' => 'APREQ_DECLARE_DATA'
  },
  {
    'name' => 'APREQ_DECLARE_DATA'
  },
  {
    'name' => 'APREQ_DECLARE_NONSTD'
  },
  {
    'name' => 'APREQ_DECLARE_NONSTD'
  },
  {
    'name' => 'APREQ_DECLARE_NONSTD'
  },
  {
    'name' => 'APREQ_DECLARE_NONSTD'
  },
  {
    'name' => 'APREQ_DEFAULT_BRIGADE_LIMIT'
  },
  {
    'name' => 'APREQ_DEFAULT_NELTS'
  },
  {
    'name' => 'APREQ_DEFAULT_READ_BLOCK_SIZE'
  },
  {
    'name' => 'APREQ_DEFAULT_READ_LIMIT'
  },
  {
    'name' => 'APREQ_ERROR_BADATTR'
  },
  {
    'name' => 'APREQ_ERROR_BADCHAR'
  },
  {
    'name' => 'APREQ_ERROR_BADDATA'
  },
  {
    'name' => 'APREQ_ERROR_BADHEADER'
  },
  {
    'name' => 'APREQ_ERROR_BADSEQ'
  },
  {
    'name' => 'APREQ_ERROR_BADUTF8'
  },
  {
    'name' => 'APREQ_ERROR_GENERAL'
  },
  {
    'name' => 'APREQ_ERROR_H'
  },
  {
    'name' => 'APREQ_ERROR_INTERRUPT'
  },
  {
    'name' => 'APREQ_ERROR_MISMATCH'
  },
  {
    'name' => 'APREQ_ERROR_NOATTR'
  },
  {
    'name' => 'APREQ_ERROR_NODATA'
  },
  {
    'name' => 'APREQ_ERROR_NOHEADER'
  },
  {
    'name' => 'APREQ_ERROR_NOPARSER'
  },
  {
    'name' => 'APREQ_ERROR_NOTEMPTY'
  },
  {
    'name' => 'APREQ_ERROR_NOTOKEN'
  },
  {
    'name' => 'APREQ_ERROR_OVERLIMIT'
  },
  {
    'name' => 'APREQ_ERROR_TAINTED'
  },
  {
    'name' => 'APREQ_ERROR_UNDERLIMIT'
  },
  {
    'name' => 'APREQ_EXPIRES_HTTP',
    'comment' => '*< Use date formatting consistent with RFC 2616'
  },
  {
    'name' => 'APREQ_EXPIRES_NSCOOKIE',
    'comment' => '*< Use format consistent with Netscape\'s Cookie Spec'
  },
  {
    'name' => 'APREQ_FLAGS_GET'
  },
  {
    'name' => 'APREQ_FLAGS_OFF'
  },
  {
    'name' => 'APREQ_FLAGS_ON'
  },
  {
    'name' => 'APREQ_FLAGS_SET'
  },
  {
    'name' => 'APREQ_H'
  },
  {
    'name' => 'APREQ_HOOK_ARGS'
  },
  {
    'name' => 'APREQ_IS_DEV_STRING'
  },
  {
    'name' => 'APREQ_IS_DEV_STRING'
  },
  {
    'name' => 'APREQ_IS_DEV_VERSION',
    'comment' => '* The formatted string of libapreq\'s version'
  },
  {
    'name' => 'APREQ_JOIN_AS_IS',
    'comment' => '*< Join the strings without modification'
  },
  {
    'name' => 'APREQ_JOIN_DECODE',
    'comment' => '*< Url-decode the strings before joining them'
  },
  {
    'name' => 'APREQ_JOIN_ENCODE',
    'comment' => '*< Url-encode the strings before joining them'
  },
  {
    'name' => 'APREQ_JOIN_QUOTE',
    'comment' => '*< Quote the strings, backslashing existing quote marks.'
  },
  {
    'name' => 'APREQ_MAJOR_VERSION'
  },
  {
    'name' => 'APREQ_MATCH_FULL',
    'comment' => '*< Full match only.'
  },
  {
    'name' => 'APREQ_MATCH_PARTIAL',
    'comment' => '*< Partial matches are ok.'
  },
  {
    'name' => 'APREQ_MINOR_VERSION'
  },
  {
    'name' => 'APREQ_MODULE'
  },
  {
    'name' => 'APREQ_MODULE_H'
  },
  {
    'name' => 'APREQ_PARAM_H'
  },
  {
    'name' => 'APREQ_PARSERS_H',
    'comment' => 'These structs are defined below'
  },
  {
    'name' => 'APREQ_PARSER_ARGS'
  },
  {
    'name' => 'APREQ_PATCH_VERSION'
  },
  {
    'name' => 'APREQ_TAINTED_BIT'
  },
  {
    'name' => 'APREQ_TAINTED_MASK'
  },
  {
    'name' => 'APREQ_UTIL_H'
  },
  {
    'name' => 'APREQ_VERSION_H'
  },
  {
    'name' => 'APREQ_VERSION_STRING'
  },
  {
    'name' => 'APREQ_XS_POSTPERL_H',
    'comment' => 'avoid namespace collisions from perl\'s XSUB.h'
  },
  {
    'name' => 'APREQ_XS_PREPERL_H',
    'comment' => 'we want efficiency under ithreads'
  },
  {
    'name' => 'APREQ_XS_TABLES_H',
    'comment' => 'backward compatibility macros support'
  },
  {
    'name' => 'APREQ_XS_THROW_ERROR'
  },
  {
    'name' => 'APR_EBADARG',
    'comment' => 'XXX: don\'t use APR_BADARG'
  },
  {
    'name' => 'APR__BucketAlloc'
  },
  {
    'name' => 'APR__Request__Param__Table'
  },
  {
    'name' => 'COOKIE_CLASS'
  },
  {
    'name' => 'COOKIE_TABLE_CLASS'
  },
  {
    'name' => 'DEREF'
  },
  {
    'name' => 'ERROR_CLASS'
  },
  {
    'name' => 'HANDLE_CLASS'
  },
  {
    'name' => 'I32_CAST'
  },
  {
    'name' => 'I32_CAST'
  },
  {
    'name' => 'MY_CXT'
  },
  {
    'name' => 'MY_CXT'
  },
  {
    'name' => 'MY_CXT_INIT'
  },
  {
    'name' => 'MY_CXT_INIT'
  },
  {
    'name' => 'NUM2PTR'
  },
  {
    'name' => 'PARAM_CLASS'
  },
  {
    'name' => 'PARAM_TABLE_CLASS'
  },
  {
    'name' => 'PERL_BCDVERSION'
  },
  {
    'name' => 'PTR2IV'
  },
  {
    'name' => 'PTR2NV'
  },
  {
    'name' => 'PTR2UV'
  },
  {
    'name' => 'START_MY_CXT'
  },
  {
    'name' => 'START_MY_CXT'
  },
  {
    'name' => '_P_P_PORTABILITY_H_'
  },
  {
    'name' => '_aMY_CXT'
  },
  {
    'name' => '_aMY_CXT'
  },
  {
    'name' => '_pMY_CXT'
  },
  {
    'name' => 'aMY_CXT'
  },
  {
    'name' => 'aMY_CXT'
  },
  {
    'name' => 'aMY_CXT_'
  },
  {
    'name' => 'apreq_attr_to_type'
  },
  {
    'name' => 'apreq_cookie'
  },
  {
    'name' => 'd'
  },
  {
    'name' => 'dMY_CXT'
  },
  {
    'name' => 'dMY_CXT'
  },
  {
    'name' => 'dMY_CXT_SV'
  },
  {
    'name' => 'dMY_CXT_SV'
  },
  {
    'name' => 'dMY_CXT_SV'
  },
  {
    'name' => 'grok_number'
  },
  {
    'name' => 'grok_numeric_radix'
  },
  {
    'name' => 'pMY_CXT'
  },
  {
    'name' => 'pMY_CXT'
  },
  {
    'name' => 'pMY_CXT_'
  },
  {
    'name' => 'pMY_CXT_'
  },
  {
    'name' => 'type'
  }
];


1;

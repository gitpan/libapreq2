.TH "src/apreq_cookie.h" 3 "30 Aug 2004" "Version 2.04-dev" "libapreq2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/apreq_cookie.h \- Cookies and Jars. 
.SH SYNOPSIS
.br
.PP
\fC#include 'apreq.h'\fP
.br
\fC#include 'apr_tables.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBapreq_jar_t\fP"
.br
.RI "\fIThis is the container class for libapreq cookies. \fP"
.ti -1c
.RI "struct \fBapreq_cookie_t\fP"
.br
.RI "\fICookie type, supporting both Netscape and RFC cookie specifications. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBAPREQ_COOKIE_VERSION_DEFAULT\fP   APREQ_COOKIE_VERSION_NETSCAPE"
.br
.ti -1c
.RI "#define \fBAPREQ_COOKIE_MAX_LENGTH\fP   4096"
.br
.ti -1c
.RI "#define \fBapreq_value_to_cookie\fP(ptr)"
.br
.ti -1c
.RI "#define \fBapreq_cookie_name\fP(c)   ((c)->v.name)"
.br
.ti -1c
.RI "#define \fBapreq_cookie_value\fP(c)   ((c)->v.data)"
.br
.ti -1c
.RI "#define \fBapreq_jar_items\fP(j)   \fBapr_table_elts\fP(j->cookies)->nelts"
.br
.ti -1c
.RI "#define \fBapreq_jar_nelts\fP(j)   \fBapr_table_elts\fP(j->cookies)->nelts"
.br
.ti -1c
.RI "#define \fBapreq_add_cookie\fP(j, c)   apreq_jar_add(j,c)"
.br
.ti -1c
.RI "#define \fBapreq_make_cookie\fP(p, n, nl, v, vl)   apreq_cookie_make(p,n,nl,v,vl)"
.br
.ti -1c
.RI "#define \fBapreq_serialize_cookie\fP(buf, len, c)   apreq_cookie_serialize(c,buf,len)"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBapreq_jar_t\fP \fBapreq_jar_t\fP"
.br
.RI "\fIThis is the container class for libapreq cookies. \fP"
.ti -1c
.RI "typedef \fBapreq_cookie_t\fP \fBapreq_cookie_t\fP"
.br
.RI "\fICookie type, supporting both Netscape and RFC cookie specifications. \fP"
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBapreq_cookie_version_t\fP { \fBAPREQ_COOKIE_VERSION_NETSCAPE\fP, \fBAPREQ_COOKIE_VERSION_RFC\fP }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBapreq_cookie_t\fP * \fBapreq_cookie\fP (const \fBapreq_jar_t\fP *jar, const char *name)"
.br
.ti -1c
.RI "void \fBapreq_jar_add\fP (\fBapreq_jar_t\fP *jar, const \fBapreq_cookie_t\fP *c)"
.br
.ti -1c
.RI "\fBapreq_jar_t\fP * \fBapreq_jar\fP (void *env, const char *hdr)"
.br
.ti -1c
.RI "\fBapreq_cookie_t\fP * \fBapreq_cookie_make\fP (\fBapr_pool_t\fP *pool, const char *name, const \fBapr_size_t\fP nlen, const char *value, const \fBapr_size_t\fP vlen)"
.br
.ti -1c
.RI "\fBapr_status_t\fP \fBapreq_cookie_attr\fP (\fBapr_pool_t\fP *p, \fBapreq_cookie_t\fP *c, const char *attr, \fBapr_size_t\fP alen, const char *val, \fBapr_size_t\fP vlen)"
.br
.ti -1c
.RI "char * \fBapreq_cookie_as_string\fP (const \fBapreq_cookie_t\fP *c, \fBapr_pool_t\fP *p)"
.br
.ti -1c
.RI "int \fBapreq_cookie_serialize\fP (const \fBapreq_cookie_t\fP *c, char *buf, \fBapr_size_t\fP len)"
.br
.ti -1c
.RI "void \fBapreq_cookie_expires\fP (\fBapreq_cookie_t\fP *c, const char *time_str)"
.br
.ti -1c
.RI "\fBapr_status_t\fP \fBapreq_cookie_bake\fP (const \fBapreq_cookie_t\fP *c, void *env)"
.br
.ti -1c
.RI "\fBapr_status_t\fP \fBapreq_cookie_bake2\fP (const \fBapreq_cookie_t\fP *c, void *env)"
.br
.ti -1c
.RI "\fBapreq_cookie_version_t\fP \fBapreq_ua_cookie_version\fP (void *env)"
.br
.in -1c
.SH "Detailed Description"
.PP 
Cookies and Jars. 

\fBapreq_cookie.h\fP describes a common server-side API for request (incoming) and response (outgoing) cookies. It aims towards compliance with the standard cookie specifications listed below.
.PP
\fBSee also:\fP
.RS 4
http://wp.netscape.com/newsref/std/cookie_spec.html 
.PP
http://www.ietf.org/rfc/rfc2109.txt 
.PP
http://www.ietf.org/rfc/rfc2964.txt 
.PP
http://www.ietf.org/rfc/rfc2965.txt
.RE
.PP

.SH "Define Documentation"
.PP 
.SS "#define APREQ_COOKIE_MAX_LENGTH   4096"
.PP
Maximum length of a single Set-Cookie(2) header 
.SS "#define APREQ_COOKIE_VERSION_DEFAULT   APREQ_COOKIE_VERSION_NETSCAPE"
.PP
Default version, used when creating a new cookie. See \fBapreq_cookie_make()\fP. 
.SS "#define apreq_value_to_cookie(ptr)"
.PP
\fBValue:\fP
.PP
.nf
apreq_attr_to_type(apreq_cookie_t, \
                                                      v, ptr)
.fi
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBapreq_cookie_version_t\fP"
.PP
Cookie Version. libapreq does not distinguish between rfc2109 and its successor rfc2965; both are referred to as APREQ_COOKIE_VERSION_RFC. Users can distinguish between them in their outgoing cookies by using \fBapreq_cookie_bake()\fP for sending rfc2109 cookies, or \fBapreq_cookie_bake2()\fP for rfc2965. The original Netscape cookie spec is still preferred for its greater portability, it is named APREQ_COOKIE_VERSION_NETSCAPE. 
.SH "Function Documentation"
.PP 
.SS "\fBapreq_cookie_t\fP* apreq_cookie (const \fBapreq_jar_t\fP * jar, const char * name)"
.PP
Fetches a cookie from the jar
.PP
\fBParameters:\fP
.RS 4
\fIjar\fP The cookie jar. 
.br
\fIname\fP The name of the desired cookie. 
.RE
.PP

.SS "char* apreq_cookie_as_string (const \fBapreq_cookie_t\fP * c, \fBapr_pool_t\fP * p)"
.PP
Returns a string that represents the cookie as it would appear in a valid 'Set-Cookie*' header.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The cookie. 
.br
\fIp\fP The pool. 
.RE
.PP

.SS "\fBapr_status_t\fP apreq_cookie_attr (\fBapr_pool_t\fP * p, \fBapreq_cookie_t\fP * c, const char * attr, \fBapr_size_t\fP alen, const char * val, \fBapr_size_t\fP vlen)"
.PP
Sets the associated cookie attribute. 
.PP
\fBParameters:\fP
.RS 4
\fIp\fP Pool for allocating the new attribute. 
.br
\fIc\fP Cookie. 
.br
\fIattr\fP Name of attribute- leading '-' or '$' characters are ignored. 
.br
\fIalen\fP Length of attr. 
.br
\fIval\fP Value of new attribute. 
.br
\fIvlen\fP Length of new attribute. 
.RE
.PP
\fBRemarks:\fP
.RS 4
Ensures cookie version & time are kept in sync. 
.RE
.PP

.SS "\fBapr_status_t\fP apreq_cookie_bake (const \fBapreq_cookie_t\fP * c, void * env)"
.PP
Add the cookie to the outgoing 'Set-Cookie' headers.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The cookie. 
.br
\fIenv\fP Environment. 
.RE
.PP

.SS "\fBapr_status_t\fP apreq_cookie_bake2 (const \fBapreq_cookie_t\fP * c, void * env)"
.PP
Add the cookie to the outgoing 'Set-Cookie2' headers.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The cookie. 
.br
\fIenv\fP Environment. 
.RE
.PP

.SS "void apreq_cookie_expires (\fBapreq_cookie_t\fP * c, const char * time_str)"
.PP
Set the Cookie's expiration date.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The cookie. 
.br
\fItime_str\fP If NULL, the Cookie's expiration date is unset, making it a session cookie. This means no 'expires' or 'max-age' attribute will appear in the cookie's serialized form. If time_str is not NULL, the expiration date will be reset to the offset (from now) represented by time_str. The time_str should be in a format that \fBapreq_atoi64t()\fP can understand, namely /[+-]?+*[YMDhms]/. 
.RE
.PP

.SS "\fBapreq_cookie_t\fP* apreq_cookie_make (\fBapr_pool_t\fP * pool, const char * name, const \fBapr_size_t\fP nlen, const char * value, const \fBapr_size_t\fP vlen)"
.PP
Returns a new cookie, made from the argument list.
.PP
\fBParameters:\fP
.RS 4
\fIpool\fP Pool which allocates the cookie. 
.br
\fIname\fP The cookie's name. 
.br
\fInlen\fP Length of name. 
.br
\fIvalue\fP The cookie's value. 
.br
\fIvlen\fP Length of value. 
.RE
.PP

.SS "int apreq_cookie_serialize (const \fBapreq_cookie_t\fP * c, char * buf, \fBapr_size_t\fP len)"
.PP
Same functionality as apreq_cookie_as_string. Stores the string representation in buf, using up to len bytes in buf as storage. The return value has the same semantics as that of apr_snprintf, including the special behavior for a 'len = 0' argument.
.PP
\fBParameters:\fP
.RS 4
\fIc\fP The cookie. 
.br
\fIbuf\fP Storage location for the result. 
.br
\fIlen\fP Size of buf's storage area. 
.RE
.PP

.SS "\fBapreq_jar_t\fP* apreq_jar (void * env, const char * hdr)"
.PP
Parse the incoming 'Cookie:' headers into a cookie jar.
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP The current environment. 
.br
\fIhdr\fP String to parse as a HTTP-merged 'Cookie' header. 
.RE
.PP
\fBRemarks:\fP
.RS 4
'data = NULL' has special behavior. In this case, apreq_jar(env,NULL) will attempt to fetch a cached object from the environment via apreq_env_jar. Failing that, it will replace 'hdr' with the result of \fBapreq_env_cookie(env)\fP, parse that, and store the resulting object back within the environment. This maneuver is designed to mimimize parsing work, since generating the cookie jar is relatively expensive. 
.RE
.PP

.SS "void apreq_jar_add (\fBapreq_jar_t\fP * jar, const \fBapreq_cookie_t\fP * c)"
.PP
Adds a cookie by pushing it to the bottom of the jar.
.PP
\fBParameters:\fP
.RS 4
\fIjar\fP The cookie jar. 
.br
\fIc\fP The cookie to add. 
.RE
.PP

.SS "\fBapreq_cookie_version_t\fP apreq_ua_cookie_version (void * env)"
.PP
Looks for the presence of a 'Cookie2' header to determine whether or not the current User-Agent supports rfc2965. 
.PP
\fBParameters:\fP
.RS 4
\fIenv\fP The current environment. 
.RE
.PP
\fBReturns:\fP
.RS 4
APREQ_COOKIE_VERSION_RFC if rfc2965 is supported, APREQ_COOKIE_VERSION_NETSCAPE otherwise. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for libapreq2 from the source code.
